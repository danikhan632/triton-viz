#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 4], instrShape = [16, 8]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 2, maxPhase = 4, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 2, maxPhase = 2, order = [1, 0], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:86", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":22:0)) attributes {noinline = false} {
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<16x16xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x16xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<16x16xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c16_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc5)
    %5 = tt.splat %2 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %6 = arith.addi %5, %3 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %arg3 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc7)
    %8 = arith.remsi %6, %7 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc7)
    %9 = arith.muli %1, %c16_i32 : i32 loc(#loc8)
    %10 = tt.splat %9 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %11 = arith.addi %10, %4 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %12 = tt.splat %arg4 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %13 = arith.remsi %11, %12 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %14 = tt.expand_dims %8 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc11)
    %15 = tt.splat %arg6 : i32 -> tensor<16x1xi32, #blocked> loc(#loc12)
    %16 = arith.muli %14, %15 : tensor<16x1xi32, #blocked> loc(#loc12)
    %17 = tt.expand_dims %4 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc13)
    %18 = tt.broadcast %16 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc14)
    %19 = tt.broadcast %17 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc14)
    %20 = arith.addi %18, %19 : tensor<16x16xi32, #blocked> loc(#loc14)
    %21 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %22 = tt.addptr %21, %20 : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc15)
    %23 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc16)
    %24 = tt.splat %arg7 : i32 -> tensor<16x1xi32, #blocked> loc(#loc17)
    %25 = arith.muli %23, %24 : tensor<16x1xi32, #blocked> loc(#loc17)
    %26 = tt.expand_dims %13 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc18)
    %27 = tt.broadcast %25 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc19)
    %28 = tt.broadcast %26 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc19)
    %29 = arith.addi %27, %28 : tensor<16x16xi32, #blocked> loc(#loc19)
    %30 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>, #blocked> loc(#loc20)
    %31 = tt.addptr %30, %29 : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc20)
    %32 = arith.addi %arg5, %c15_i32 : i32 loc(#loc46)
    %33 = arith.divsi %32, %c16_i32 : i32 loc(#loc47)
    %34 = arith.muli %arg7, %c16_i32 : i32 loc(#loc24)
    %35 = tt.splat %34 : i32 -> tensor<16x16xi32, #blocked> loc(#loc25)
    %36 = triton_gpu.local_alloc  : () -> !tt.memdesc<2x16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc26)
    %37 = triton_gpu.local_alloc  : () -> !tt.memdesc<2x16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc27)
    %38 = arith.cmpi sgt, %33, %c0_i32 : i32 loc(#loc28)
    %39 = tt.splat %arg5 : i32 -> tensor<1x16xi32, #blocked> loc(#loc29)
    %40 = arith.cmpi slt, %17, %39 : tensor<1x16xi32, #blocked> loc(#loc29)
    %41 = tt.broadcast %40 : tensor<1x16xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc26)
    %42 = triton_gpu.memdesc_subview %36[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<2x16x16xf32, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc26)
    %43 = tt.splat %38 : i1 -> tensor<16x16xi1, #blocked> loc(#loc28)
    %44 = arith.andi %43, %41 : tensor<16x16xi1, #blocked> loc(#loc28)
    %45 = triton_gpu.async_copy_global_to_local %22, %42 mask %44 other %cst_0 : tensor<16x16x!tt.ptr<f32>, #blocked> -> <16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc26)
    %46 = triton_gpu.async_commit_group %45 loc(#loc26)
    %47 = tt.splat %arg5 : i32 -> tensor<16x1xi32, #blocked> loc(#loc30)
    %48 = arith.cmpi slt, %23, %47 : tensor<16x1xi32, #blocked> loc(#loc30)
    %49 = tt.broadcast %48 : tensor<16x1xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc27)
    %50 = triton_gpu.memdesc_subview %37[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<2x16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc27)
    %51 = arith.andi %43, %49 : tensor<16x16xi1, #blocked> loc(#loc28)
    %52 = triton_gpu.async_copy_global_to_local %31, %50 mask %51 other %cst_0 : tensor<16x16x!tt.ptr<f32>, #blocked> -> <16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc27)
    %53 = triton_gpu.async_commit_group %52 loc(#loc27)
    %54 = arith.cmpi sgt, %33, %c1_i32 : i32 loc(#loc28)
    %55 = tt.addptr %22, %cst : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc31)
    %56 = tt.addptr %31, %35 : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc25)
    %57 = arith.subi %arg5, %c16_i32 : i32 loc(#loc32)
    %58 = tt.splat %57 : i32 -> tensor<1x16xi32, #blocked> loc(#loc29)
    %59 = arith.cmpi slt, %17, %58 : tensor<1x16xi32, #blocked> loc(#loc29)
    %60 = tt.broadcast %59 : tensor<1x16xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc26)
    %61 = triton_gpu.memdesc_subview %36[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<2x16x16xf32, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc26)
    %62 = tt.splat %54 : i1 -> tensor<16x16xi1, #blocked> loc(#loc28)
    %63 = arith.andi %62, %60 : tensor<16x16xi1, #blocked> loc(#loc28)
    %64 = triton_gpu.async_copy_global_to_local %55, %61 mask %63 other %cst_0 : tensor<16x16x!tt.ptr<f32>, #blocked> -> <16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc26)
    %65 = triton_gpu.async_commit_group %64 loc(#loc26)
    %66 = tt.splat %57 : i32 -> tensor<16x1xi32, #blocked> loc(#loc30)
    %67 = arith.cmpi slt, %23, %66 : tensor<16x1xi32, #blocked> loc(#loc30)
    %68 = tt.broadcast %67 : tensor<16x1xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc27)
    %69 = triton_gpu.memdesc_subview %37[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<2x16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc27)
    %70 = arith.andi %62, %68 : tensor<16x16xi1, #blocked> loc(#loc28)
    %71 = triton_gpu.async_copy_global_to_local %56, %69 mask %70 other %cst_0 : tensor<16x16x!tt.ptr<f32>, #blocked> -> <16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc27)
    %72 = triton_gpu.async_commit_group %71 loc(#loc27)
    %73 = triton_gpu.async_wait %53 {num = 2 : i32} loc(#loc26)
    %74 = triton_gpu.memdesc_subview %42[%c0_i32, %c0_i32] : !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x8xf32, #shared, #triton_gpu.shared_memory> loc(#loc26)
    %75 = triton_gpu.local_load %74 : !tt.memdesc<16x8xf32, #shared, #triton_gpu.shared_memory> -> tensor<16x8xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc26)
    %76 = triton_gpu.memdesc_subview %50[%c0_i32, %c0_i32] : !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<8x16xf32, #shared1, #triton_gpu.shared_memory> loc(#loc27)
    %77 = triton_gpu.local_load %76 : !tt.memdesc<8x16xf32, #shared1, #triton_gpu.shared_memory> -> tensor<8x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc27)
    %78:10 = scf.for %arg9 = %c0_i32 to %33 step %c1_i32 iter_args(%arg10 = %cst_1, %arg11 = %55, %arg12 = %56, %arg13 = %c1_i32, %arg14 = %c0_i32, %arg15 = %42, %arg16 = %50, %arg17 = %72, %arg18 = %75, %arg19 = %77) -> (tensor<16x16xf32, #mma>, tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16x!tt.ptr<f32>, #blocked>, i32, i32, !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable>, !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable>, !triton_gpu.async.token, tensor<16x8xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>>, tensor<8x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>>)  : i32 {
      %99 = arith.subi %33, %c2_i32 : i32 loc(#loc28)
      %100 = arith.cmpi slt, %arg9, %99 : i32 loc(#loc28)
      %101 = triton_gpu.memdesc_subview %arg15[%c0_i32, %c8_i32] : !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x8xf32, #shared, #triton_gpu.shared_memory> loc(#loc26)
      %102 = triton_gpu.local_load %101 : !tt.memdesc<16x8xf32, #shared, #triton_gpu.shared_memory> -> tensor<16x8xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc26)
      %103 = triton_gpu.memdesc_subview %arg16[%c8_i32, %c0_i32] : !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<8x16xf32, #shared1, #triton_gpu.shared_memory> loc(#loc27)
      %104 = triton_gpu.local_load %103 : !tt.memdesc<8x16xf32, #shared1, #triton_gpu.shared_memory> -> tensor<8x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc27)
      %105 = tt.dot %arg18, %arg19, %arg10, inputPrecision = tf32 : tensor<16x8xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<8x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<16x16xf32, #mma> loc(#loc33)
      %106 = tt.addptr %arg11, %cst : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc31)
      %107 = tt.addptr %arg12, %35 : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc25)
      %108 = arith.addi %arg13, %c1_i32 : i32 loc(#loc28)
      %109 = arith.cmpi slt, %108, %c2_i32 : i32 loc(#loc28)
      %110 = arith.select %109, %108, %c0_i32 : i32 loc(#loc28)
      %111 = arith.addi %arg9, %c2_i32 : i32 loc(#loc28)
      %112 = arith.muli %111, %c16_i32 : i32 loc(#loc34)
      %113 = arith.subi %arg5, %112 : i32 loc(#loc32)
      %114 = tt.splat %113 : i32 -> tensor<1x16xi32, #blocked> loc(#loc29)
      %115 = arith.cmpi slt, %17, %114 : tensor<1x16xi32, #blocked> loc(#loc29)
      %116 = tt.broadcast %115 : tensor<1x16xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc26)
      %117 = triton_gpu.memdesc_subview %36[%110, %c0_i32, %c0_i32] : !tt.memdesc<2x16x16xf32, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc26)
      %118 = tt.splat %100 : i1 -> tensor<16x16xi1, #blocked> loc(#loc28)
      %119 = arith.andi %118, %116 : tensor<16x16xi1, #blocked> loc(#loc28)
      %120 = triton_gpu.async_copy_global_to_local %106, %117 mask %119 other %cst_0 : tensor<16x16x!tt.ptr<f32>, #blocked> -> <16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc26)
      %121 = triton_gpu.async_commit_group %120 loc(#loc26)
      %122 = tt.splat %113 : i32 -> tensor<16x1xi32, #blocked> loc(#loc30)
      %123 = arith.cmpi slt, %23, %122 : tensor<16x1xi32, #blocked> loc(#loc30)
      %124 = tt.broadcast %123 : tensor<16x1xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc27)
      %125 = triton_gpu.memdesc_subview %37[%110, %c0_i32, %c0_i32] : !tt.memdesc<2x16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc27)
      %126 = arith.andi %118, %124 : tensor<16x16xi1, #blocked> loc(#loc28)
      %127 = triton_gpu.async_copy_global_to_local %107, %125 mask %126 other %cst_0 : tensor<16x16x!tt.ptr<f32>, #blocked> -> <16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc27)
      %128 = triton_gpu.async_commit_group %127 loc(#loc27)
      %129 = arith.addi %arg14, %c1_i32 : i32 loc(#loc28)
      %130 = arith.cmpi slt, %129, %c2_i32 : i32 loc(#loc28)
      %131 = arith.select %130, %129, %c0_i32 : i32 loc(#loc28)
      %132 = triton_gpu.memdesc_subview %36[%131, %c0_i32, %c0_i32] : !tt.memdesc<2x16x16xf32, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc26)
      %133 = triton_gpu.async_wait %arg17 {num = 2 : i32} loc(#loc26)
      %134 = triton_gpu.memdesc_subview %37[%131, %c0_i32, %c0_i32] : !tt.memdesc<2x16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc27)
      %135 = triton_gpu.memdesc_subview %132[%c0_i32, %c0_i32] : !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<16x8xf32, #shared, #triton_gpu.shared_memory> loc(#loc26)
      %136 = triton_gpu.local_load %135 : !tt.memdesc<16x8xf32, #shared, #triton_gpu.shared_memory> -> tensor<16x8xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc26)
      %137 = triton_gpu.memdesc_subview %134[%c0_i32, %c0_i32] : !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> -> !tt.memdesc<8x16xf32, #shared1, #triton_gpu.shared_memory> loc(#loc27)
      %138 = triton_gpu.local_load %137 : !tt.memdesc<8x16xf32, #shared1, #triton_gpu.shared_memory> -> tensor<8x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc27)
      %139 = tt.dot %102, %104, %105, inputPrecision = tf32 : tensor<16x8xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<8x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<16x16xf32, #mma> loc(#loc33)
      scf.yield %139, %106, %107, %110, %131, %132, %134, %128, %136, %138 : tensor<16x16xf32, #mma>, tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16x!tt.ptr<f32>, #blocked>, i32, i32, !tt.memdesc<16x16xf32, #shared, #triton_gpu.shared_memory, mutable>, !tt.memdesc<16x16xf32, #shared1, #triton_gpu.shared_memory, mutable>, !triton_gpu.async.token, tensor<16x8xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>>, tensor<8x16xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc28)
    } loc(#loc28)
    %79 = triton_gpu.async_wait  {num = 0 : i32} loc(#loc28)
    triton_gpu.local_dealloc %36 : !tt.memdesc<2x16x16xf32, #shared, #triton_gpu.shared_memory, mutable> loc(#loc28)
    triton_gpu.local_dealloc %37 : !tt.memdesc<2x16x16xf32, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc28)
    %80 = arith.truncf %78#0 : tensor<16x16xf32, #mma> to tensor<16x16xf16, #mma> loc(#loc35)
    %81 = tt.expand_dims %6 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc36)
    %82 = tt.splat %arg8 : i32 -> tensor<16x1xi32, #blocked> loc(#loc37)
    %83 = arith.muli %82, %81 : tensor<16x1xi32, #blocked> loc(#loc37)
    %84 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc38)
    %85 = tt.addptr %84, %83 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc38)
    %86 = tt.expand_dims %11 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc39)
    %87 = tt.broadcast %85 : tensor<16x1x!tt.ptr<f32>, #blocked> -> tensor<16x16x!tt.ptr<f32>, #blocked> loc(#loc40)
    %88 = tt.broadcast %86 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc40)
    %89 = tt.addptr %87, %88 : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %90 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc41)
    %91 = arith.cmpi slt, %81, %90 : tensor<16x1xi32, #blocked> loc(#loc41)
    %92 = tt.splat %arg4 : i32 -> tensor<1x16xi32, #blocked> loc(#loc42)
    %93 = arith.cmpi slt, %86, %92 : tensor<1x16xi32, #blocked> loc(#loc42)
    %94 = tt.broadcast %91 : tensor<16x1xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc43)
    %95 = tt.broadcast %93 : tensor<1x16xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc43)
    %96 = arith.andi %94, %95 : tensor<16x16xi1, #blocked> loc(#loc43)
    %97 = triton_gpu.convert_layout %80 : tensor<16x16xf16, #mma> -> tensor<16x16xf16, #blocked> loc(#loc44)
    %98 = arith.extf %97 : tensor<16x16xf16, #blocked> to tensor<16x16xf32, #blocked> loc(#loc44)
    tt.store %89, %98, %96 : tensor<16x16x!tt.ptr<f32>, #blocked> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":30:26)
#loc3 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":31:26)
#loc4 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":37:23)
#loc5 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":37:41)
#loc6 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":37:28)
#loc7 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":37:48)
#loc8 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":38:23)
#loc9 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":38:28)
#loc10 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":38:48)
#loc11 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":40:30)
#loc12 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":40:41)
#loc13 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":40:60)
#loc14 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":40:53)
#loc15 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":40:22)
#loc16 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":41:29)
#loc17 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":41:40)
#loc18 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":41:60)
#loc19 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":41:52)
#loc20 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":41:22)
#loc21 = loc("/home/green/code/triton-vortex/triton-cpu/python/triton/language/standard.py":40:22)
#loc22 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":46:33)
#loc23 = loc("/home/green/code/triton-vortex/triton-cpu/python/triton/language/standard.py":40:28)
#loc24 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":51:23)
#loc25 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":51:18)
#loc26 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":47:20)
#loc27 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":48:20)
#loc28 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":46:22)
#loc29 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":47:51)
#loc30 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":48:51)
#loc31 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":50:18)
#loc32 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":47:55)
#loc33 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":49:33)
#loc34 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":47:59)
#loc35 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":55:23)
#loc36 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":58:41)
#loc37 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":58:33)
#loc38 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":58:21)
#loc39 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":58:72)
#loc40 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":58:52)
#loc41 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":59:33)
#loc42 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":59:58)
#loc43 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":59:39)
#loc44 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":60:21)
#loc45 = loc("/home/green/code/triton-vortex/triton-cpu/python/matmul.py":60:4)
#loc46 = loc(callsite(#loc21 at #loc22))
#loc47 = loc(callsite(#loc23 at #loc22))
